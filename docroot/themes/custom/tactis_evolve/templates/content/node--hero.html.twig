{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
    set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    node.field_hero_options.value|raw,
    node.field_show_title.value|raw,
    'd-flex',
    'flex-column',
    'justify-content-end'
]
%}

{% set newAttributes = create_attribute() %}

{%
    set titleTextClasses = [
    'title-text',
    'mt-5',
    'mt-md-0',
    content.field_hero_image.0 is not empty ? 'order-md-1',
    content.field_hero_image.0 is not empty ? 'mw-100',
    content.field_hero_image.0 is not empty ? 'mw-md-70',
    content.field_hero_image.0 is empty ? 'mw-lg',
    node.field_show_title.value|raw != 'hero-title' ? 'display-5',
    node.field_show_title.value|raw != 'hero-title' ? 'fw-semibold',
    node.field_show_title.value|raw != 'hero-title' ? 'pe-md-5',
    node.field_show_title.value|raw != 'hero-title' ? 'text-lowercase',
]
%}
{{ attach_library('bootstrap5/node') }}
<div{{ attributes.addClass(classes) }}>
  {% if node.field_hero_options.value|raw == 'hero-split' %}
    {# 50/50 Hero Layout #}
    <div class="container">
      <div class="row align-items-center g-4">
        <div class="col-12 col-md-6">
          {# Hero Tag #}
          <div class="hero-tag text-uppercase fw-semibold mb-4">
            Welcome to Tactis
          </div>

          {# Hero Content #}
          <div class="hero-headline">
            {% if node.bundle == 'article' %}
              <div class="return-to-articles pb-5"><a class="link-tactis-primary link-underline-opacity-0 fw-semibold" href="/articles"><i class="bi bi-arrow-left"></i> Back to articles</a></div>
            {% endif %}
            {% if node.field_show_title.value|raw == "hero-title" %}
              {{ label }}
            {% endif %}
            {{ content.body }}
          </div>

          {# Hero Button #}
          {% if node.field_show_arrow.value|raw == 1 %}
            <a href="/articles" class="hero-button btn btn-lg fw-semibold d-inline-flex align-items-center text-white mt-3">
              View Full Series
              <img src="/themes/custom/tactis_evolve/images/asset_arrow/tactis-button-arrow.svg" class="ms-2" width="16" height="16" alt="Arrow">
            </a>
          {% endif %}
        </div>

        <div class="col-12 col-md-6">
          {% if content.field_hero_image.0 is not empty %}
            {% if node.field_use_animation.value and content.field_hero_image[0]['#media'].field_media_json.value %}
              {{ attach_library('tactis_evolve/lottie') }}
              <div class="hero-image-container position-relative w-100">
                <div id="hero-image-animation" class="lottie-animation" data-animation="{{ content.field_hero_image[0]['#media'].field_media_json.value }}"></div>
              </div>
            {% else %}
              <div class="hero-image-container">
                {{ content.field_hero_image }}
              </div>
            {% endif %}
          {% endif %}
        </div>
      </div>
    </div>

  {% else %}
    {# Original Hero Layouts (Dark/Light) #}
    {% if content.field_hero_image.0 is not empty %}
      <div class="d-md-flex flex-md-row justify-content-md-between align-items-md-center text-center text-md-start">
      {% if node.field_use_animation.value and content.field_hero_image[0]['#media'].field_media_json.value %}
        {% set titleTextClasses = titleTextClasses|merge(['animate-burst']) %}
        {{ attach_library('tactis_evolve/lottie') }}
        <div class="hero-image-container order-md-2 d-inline-block position-relative w-100 animate-header-lottie">
          <div id="hero-image-animation" class="lottie-animation" data-animation="{{ content.field_hero_image[0]['#media'].field_media_json.value }}"></div>
        </div>
      {% else %}
        <div class="hero-image-container order-md-2 d-inline-block">
          {{ content.field_hero_image }}
        </div>
      {% endif %}
    {% endif %}
    <div{{ newAttributes.addClass(titleTextClasses) }}>
      {% if node.bundle == 'article' %}
        <div class="return-to-articles pb-5"><a class="link-tactis-primary link-underline-opacity-0 fw-semibold" href="/articles"><i class="bi bi-arrow-left"></i> Back to articles</a></div>
      {% endif %}
      {% if node.field_show_title.value|raw == "hero-title" %}
        {{ label }}
      {% endif %}
      {{ content.body }}
    </div>
    {% if content.field_hero_image.0 is not empty %}
      </div>
    {% endif %}
    {% if node.field_show_arrow.value|raw == 1 %}
      <div class="get-started d-flex align-items-center py-3">
        <span>Let's get started</span><i class="bi bi-arrow-down-circle ps-3 fs-5"></i>
      </div>
    {% endif %}
  {% endif %}
</div>
