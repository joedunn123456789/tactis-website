{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}
{%
    set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
    label_display == 'inline' ? 'clearfix',
]
%}
{%
    set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
]
%}

<div{{ attributes.addClass(classes) }}>
    <div class="row row-cols-1 row-cols-md-3 g-md-5 my-4 animation-container">
    {% for item in items %}
        {% set displaySize = item.attributes['data-title-display'] %}
        {% set cardAnimation = item.attributes['data-card-animation'] %}
        <div{{ attributes.addClass('col', 'animate', cardAnimation) }}>
            <div class="card h-100 bg-transparent text-reset border-0">
                <div class="card-body">
                    <h5 class="card-title fw-semibold {{ displaySize }}">{{ item.content['#paragraph'].field_title.value }}</h5>
                    <div class="card-text">{{ item.content['#paragraph'].field_rich_text.value|raw }}</div>
                </div>
            </div>
        </div>
    {% endfor %}
    </div>
</div>

