{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
    set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'py-5',
    paragraph.field_parallax.value ? 'is_parallax',
    paragraph.field_parallax.value ? 'min-vh-66',
    'bg-' ~ paragraph.field_section_background.value|replace({'section-background-': ''}),
    (paragraph.field_section_background.value == "section-background-black") ? 'text-light',
    (paragraph.field_section_background.value == "section-background-plum") ? 'text-light',
    (paragraph.field_section_background.value == "section-background-image") ? 'z-3',
    'border-bottom',
    'border-tactis-light',
    'position-relative',
]
%}

{%  block paragraph %}

{% if paragraph.field_section_background.value == 'section-background-image' %}
    <style>
      .bg-{{ id }} {
        background-image: url('{{ bg_lg }}');
      }

      .is_parallax .bg-{{ id }} {
        background-position-y: calc(50% - 1px);
        position: absolute;
        background-attachment: fixed;
        background-size: cover;
        width: 100%;
        height: 100%;
      }

      @media screen and (min-width: 1140px){
        .bg-{{ id }} {
          background-image: url('{{ bg_xl }}');
        }

      }
    </style>
    {% if paragraph.field_parallax.value %}
        <div{{ attributes.addClass(classes) }}>
            <div class="img-container position-absolute w-100 h-100">
                <div class="bg-{{ id }}"></div>
            </div>
            <div class="content-container container position-absolute w-100 h-100">
                <div class="row h-100 animate-scroll animate">
                    {{ content|without('field_parallax', 'field_section_background', 'field_image') }}
                </div>
            </div>
        </div>
    {% else %}
        <div class="container-fluid g-0 bg-{{ id }}">
            <div{{ attributes.addClass(classes) }}>
                <div class="container">
                    <div class="row animate-scroll animate">
                        {{ content|without('field_parallax', 'field_section_background', 'field_image') }}
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
{% else %}
    <div{{ attributes.addClass(classes) }}>
        <div class="container">
            <div class="row animate-scroll animate">
                {{ content|without('field_parallax', 'field_section_background', 'field_image') }}
            </div>
        </div>
    </div>
{% endif %}

{% endblock paragraph %}
